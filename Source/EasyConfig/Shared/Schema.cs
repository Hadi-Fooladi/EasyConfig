// auto-generated by EasyConfig (v4.7.30)

using XmlExt;
using System;
using System.Xml;
using System.Collections.Generic;

namespace EasyConfig
{
	internal class Schema
	{
		public readonly Version Version;
		public readonly CRoot Root;
		public readonly List<DataType> Types;
		public readonly List<Enum> Enums;

		public Schema(string Filename)
		{
			var Doc = new XmlDocument();
			Doc.Load(Filename);

			var Node = Doc.DocumentElement;

			Version = Node.verAttr("Version");

			var RootNode = Node.SelectSingleNode("*[local-name()='Root']");
			if (RootNode != null)
				Root = new CRoot(RootNode);

			Types = new List<DataType>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='DataType']"))
				Types.Add(new DataType(X));

			Enums = new List<Enum>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='Enum']"))
				Enums.Add(new Enum(X));
		}
	}

	internal partial class Base
	{
		public readonly string Name;
		public readonly string Desc;
		public readonly MultiLineDesc MultiLineDesc;

		public Base(XmlNode Node)
		{
			Name = Node.Attr("Name");
			Desc = Node.Attr("Desc", null);

			var MultiLineDescNode = Node.SelectSingleNode("*[local-name()='Desc']");
			if (MultiLineDescNode != null)
				MultiLineDesc = new MultiLineDesc(MultiLineDescNode);
		}
	}

	internal partial class SingleLineDesc
	{
		public readonly string Value;

		public SingleLineDesc(XmlNode Node)
		{
			Value = Node.Attr("Value");
		}
	}

	internal class MultiLineDesc
	{
		public readonly List<SingleLineDesc> Lines;

		public MultiLineDesc(XmlNode Node)
		{
			Lines = new List<SingleLineDesc>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='Line']"))
				Lines.Add(new SingleLineDesc(X));
		}
	}

	internal class VarBase : Base
	{
		public readonly string Type;

		/// <summary>
		/// Default is 'true'
		/// </summary>
		public readonly bool ReadOnly;

		public VarBase(XmlNode Node) : base(Node)
		{
			Type = Node.Attr("Type");
			ReadOnly = Node.ynAttr("ReadOnly", Defaults.ReadOnly);
		}
	}

	internal partial class Attribute : VarBase
	{
		public readonly string Default;

		public Attribute(XmlNode Node) : base(Node)
		{
			Default = Node.Attr("Default", null);
		}
	}

	internal partial class Field : VarBase
	{
		/// <summary>
		/// If null, 'Name' will be used for tag name
		/// </summary>
		public readonly string TagName;

		public readonly bool Multiple;

		public Field(XmlNode Node) : base(Node)
		{
			TagName = Node.Attr("TagName", null);
			Multiple = Node.ynAttr("Multiple", false);
		}
	}

	internal partial class DataType : Base
	{
		public readonly string Inherit;
		public readonly bool Partial;

		/// <summary>
		/// Access modifier for class (Default is internal)
		/// </summary>
		public readonly string Access;

		public readonly List<Field> Fields;
		public readonly List<Attribute> Attributes;

		public DataType(XmlNode Node) : base(Node)
		{
			Inherit = Node.Attr("Inherit", null);
			Partial = Node.ynAttr("Partial", false);
			Access = Node.Attr("Access", Defaults.Access);

			Fields = new List<Field>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='Field']"))
				Fields.Add(new Field(X));

			Attributes = new List<Attribute>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='Attribute']"))
				Attributes.Add(new Attribute(X));
		}
	}

	internal partial class Node : DataType
	{
		/// <summary>
		/// Default is 'true'
		/// </summary>
		public readonly bool ReadOnly;

		public readonly bool Multiple;
		public readonly string TypeName;

		/// <summary>
		/// If null, 'Name' will be used for tag name
		/// </summary>
		public readonly string TagName;

		public readonly List<Node> Nodes;
		public readonly List<DataType> Types;

		public Node(XmlNode Node) : base(Node)
		{
			ReadOnly = Node.ynAttr("ReadOnly", Defaults.ReadOnly);
			Multiple = Node.ynAttr("Multiple", false);
			TypeName = Node.Attr("TypeName", null);
			TagName = Node.Attr("TagName", null);

			Nodes = new List<Node>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='Node']"))
				Nodes.Add(new Node(X));

			Types = new List<DataType>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='DataType']"))
				Types.Add(new DataType(X));
		}
	}

	internal partial class CRoot : Node
	{
		public readonly Version Version;

		public CRoot(XmlNode Node) : base(Node)
		{
			Version = Node.verAttr("Version");
		}
	}

	internal partial class Enum : Base
	{
		/// <summary>
		/// Comma Separated Members (Value assignment is optional)
		/// </summary>
		public readonly string Members;

		/// <summary>
		/// Access modifier (Default is internal)
		/// </summary>
		public readonly string Access;

		public readonly List<EnumMember> MembersList;

		public Enum(XmlNode Node) : base(Node)
		{
			Members = Node.Attr("Members", null);
			Access = Node.Attr("Access", Defaults.Access);

			MembersList = new List<EnumMember>();
			foreach (XmlNode X in Node.SelectNodes("*[local-name()='Member']"))
				MembersList.Add(new EnumMember(X));
		}
	}

	internal partial class EnumMember : Base
	{
		public readonly int? Value;

		public EnumMember(XmlNode Node) : base(Node)
		{
			Node.Attr("Value", out Value, null);
		}
	}
}
